
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openai_client import ask_openai, load_working_providers
from user_provider import save_user_provider
from database import save_user_history

router = Router()

@router.message(Command("help"))
async def show_help(message: types.Message):
    help_text = (
        "<b>ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "–Ø ‚Äî Telegram-–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ò–ò-–º–æ–¥–µ–ª–µ–π (ChatGPT, ChatGLM, Qwen –∏ –¥—Ä.). "
        "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /provider.\n\n"
        "üìå <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç</b>: —è –∑–∞–ø–æ–º–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä. "
        "–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.\n\n"
        "üßπ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /reset.\n\n"
    )
    await message.answer(help_text, parse_mode="HTML")

@router.message(Command("reset"))
async def reset_context(message: types.Message):
    save_user_history(message.from_user.id, [])  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await message.answer("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

@router.message(Command("provider"))
async def show_provider_menu(message: types.Message):
    providers = load_working_providers()
    if not providers:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.")
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=prov.__name__, callback_data=f"prov_{prov.__name__}")]
            for prov in providers
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=markup)

@router.callback_query()
async def set_provider(callback: types.CallbackQuery):
    if callback.data and callback.data.startswith("prov_"):
        provider_name = callback.data[5:]
        save_user_provider(callback.from_user.id, provider_name)
        await callback.message.edit_text(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {provider_name}")

@router.message()
async def handle_message(message: types.Message):
    reply = await ask_openai(message.text, message.from_user.id)
    await message.answer(reply)
